**Naming convention**
variables cannot start with numbers
variables name follow camelCase
variable name only contain numbers,dollar,letters,underscore signs
error may occour if we use reserved javascript keywords.For eg-new,function
variable starting with uppercase will be used in OOPS
variable which are all in UPPERCASE are fixed or constant.For eg=PI=3.14
naming of variable should be proper,by seeing that name one can recorgnize what value is given

DataType-
In javascript can be primitive or object
if value is not object then only it is primitive
object->
let me={
       name:'jonus'
};

primitive->
let firstName=jonus;

total 7 primitive data types

console.log(2**3)->it means 2 to the power of 3->>>exponential operator

To concatenate we use "+" operator

let keywords can be changed in future
const keywords remains same,value cannot be changed(if we reassign we get an error)->immutable variables,example birthyear
we cannot declare empty const variable->for ex-const job(we get error)
for clean code we always use const,if you are sure that the variable is going to change in future then only use let
its a good practise to have very less changes in variables because it will introduce potential to  create bugs
Var is a old way of declaring variables,its just like let
difference between var and let

Its not mandatory to declare variables but it is not a good practise because it does not create a variable in current scope instead it will create a property in global object


**String Concatenation**

const firstName='Jonas'
const job='teacher'
const birthYear='1995'
const Year='2023'

const result="I'm"+firstName+"a"+birthYear-Year+"old"+job (this was a old method of concatenation)

const resultNew=`I'm ${firstName} a ${birthYear-Year} old ${job}`(this is called template literals)
this can arrange multiple pieces to one final string,back tick is used
Most used ES6 features
it looks more cleaner
we can use backtick for any regular string
`this is a most common programming language`

It is used in multi line string->
console.log('string with \n\ 
multiple \n\
line')

console.log(`string with 
multiple 
line`)

**How to use ternary operator in place if if else loop**
    return checkDataInOpenmrs === false ? procedureName : await findProcedure(diagnosisJson);
    // if (checkDataInOpenmrs === false) {
    //     return procedureName;
    // }
    // else {
    //     await findProcedure(diagnosisJson)
    // }

** Type Conversion**

String to Number conversion
const year='1991'
console.log(Number(year+8))=>19918
year=Number(year+8)=>2000

console.log(Number('John))=>Nan that means it is not a number

Number to string
console.log(String(23))=>23

**Type Coercion**
It happens whenever operator is dealing with two values which have different types in that case JS behind the scene convert one of the value to another to match
whenever there is a coercion between number and string,number will be converted to string
For Example-
console.log('I am'+23+'years old')=> I am 23 years old
JS have automatic type corecion

console.log('23'-'10'-3)=>10
//This means '-' and '*' and '/'operator is opposite it converts string to number

**Boolean**
Boolean(0)=>false
Boolean('undefined')=>false
Boolean('jonas')=>true
Boolean({})=>true,empty object is also true
Boolean('')=>false,empty string is false



**Strict Mode**
it is a specaial mode that we can activate in javascript which make it easier to write secure code
it is written in beginning of the code
'use strict'//all the code will be written after that then only it can be activated
it can also be activated for particular code block or function
if there is strict mode and we use undeclared variable it will give error
if we are not using it,then we will not be able to find what mistake we are doing in code

**Functions**
Use DRY code(don't repeat yourself,make it reusable)
console.log is also a buildt in function
function CalAge(birthYear)->birthYear is parameter
{
return 2037-birthYear
}
CalAge(1999)->here 1999 is argument(actual value)


**Function Declaration**

function CalAge(birthYear)->birthYear is parameter
{
return 2037-birthYear
}
CalAge(1999)->here 1999 is argument(actual value)

** Arrow functions**
But now, what if we had multiple parameters?

Well, then we need

to wrap the parameters here into parentheses.

So in VS Code, we can just select a variable

and then write parentheses

and then it will automatically wrap this variable

into parentheses on both sides.

So let's say we want the birthYeah

but also the firstName

so that we can like return something else,

like a sentence.

So let's comment out this part here

and instead, let's return a string.

And again, we're using a template string here

to build that string




